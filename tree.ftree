namespace trees {
namespace tree {

node {
    %multiparent
    %intrusive_ptr
};

node root {
    include_node includes[];
    namespace_node global_namespace;
};

node include_node {
    %include <string>
    std::string name;
};

node namespace_node {
    %include <string>
    namespace_node_weak_ptr parent;
    std::string name;
    namespace_node namespaces[];
    group_node group;
    bool uses_lists;
};

node group_node {
    %include <string>
    %include <tree.h>
    namespace_node_weak_ptr ns;
    group_node_weak_ptr parent;
    std::string name;
    bool has_visitor;
    bool has_const_visitor;
    group_node groups[];
    node_node nodes[];
    data_member_node default_members[];
    smartpointer_type smartpointer;
};

node node_node {
    %include <string>
    %include <tree.h>
    namespace_node_weak_ptr ns;
    group_node_weak_ptr group;
    std::string name;
    data_member_node members[];
    smartpointer_type smartpointer;
};

group type_node {
    node group_type_node {
        group_node node;
    };

    node node_type_node {
        node_node node;
    };

    node basic_type_node {
        %include <string>
        namespace_node_weak_ptr ns;
        std::string name;
        bool is_node;
        bool is_const;
        bool is_volatile;
    };

    node reference_type_node {
        type_node type;
    };

    node pointer_type_node {
        type_node type;
        bool is_const;
        bool is_volatile;
    };

    node template_type_node {
        %include <string>
        namespace_node_weak_ptr ns;
        std::string name;
        type_node template_args[];
    };

    node list_type_node {
        type_node type;
    };

    visitor;
};

node data_member_node {
    %include <string>
    type_node type;
    std::string name;
    bool needs_init;
};

visitor;
const visitor;

}
}
