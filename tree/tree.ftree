namespace foundry {
namespace tree {

node {
    %multiparent%
    %intrusive_ptr%
};

node root {
    include_node includes[];
    namespace_node global_namespace;
};

node include_node {
    %include <string>%
    std::string name;
};

node data_member_node {
    %include <string>%
    node type;
    std::string name;
};

node node_node {
    %include <string>%
    namespace_node_weak_ptr ns;
    std::string name;
    data_member_node members[];
};

node namespace_node {
    %include <string>%
    namespace_node_weak_ptr parent;
    std::string name;
    bool has_nodes;
    bool has_visitor;
    bool has_const_visitor;
    namespace_node namespaces[];
    node_node nodes[];
};

node basic_type_node {
    %include <string>%
    namespace_node_weak_ptr ns;
    std::string name;
    bool is_const;
    bool is_volatile;
};

node reference_type_node {
    node type;
};

node pointer_type_node {
    node type;
    bool is_const;
    bool is_volatile;
};

node template_type_node {
    %include <string>%
    std::string name;
    node template_args[];
};

node list_type_node {
    node type;
};

visitor smartpointer_visitor
{
};

const visitor header_output_visitor
{
    header_output_visitor(std::ostream &);

    std::ostream &out;
};

const visitor impl_output_visitor
{
    header_output_visitor(std::ostream &);

    std::ostream &out;
};

}
}
