namespace foundry {
namespace tree {

node {
    %multiparent
    %intrusive_ptr
};

node root {
    include_node includes[];
    namespace_node global_namespace;
};

node include_node {
    %include <string>
    std::string name;
};

node namespace_node {
    %include <string>
    %include <set>
    namespace_node_weak_ptr parent;
    std::string name;
    namespace_node namespaces[];
    group_node group;
    std::set<std::string> node_types;
};

node group_node {
    %include <string>
    namespace_node_weak_ptr ns;
    group_node_weak_ptr parent;
    std::string name;
    bool has_visitor;
    bool has_const_visitor;
    group_node groups[];
    node_node nodes[];
};

node node_node {
    %include <string>
    namespace_node_weak_ptr ns;
    group_node_weak_ptr group;
    std::string name;
    data_member_node members[];
};

node data_member_node {
    %include <string>
    type_node type;
    std::string name;
    bool needs_init;
};

group type_node {

    node basic_type_node {
        %include <string>
        namespace_node_weak_ptr ns;
        std::string name;
        bool is_const;
        bool is_volatile;
    };

    node reference_type_node {
        node type;
    };

    node pointer_type_node {
        node type;
        bool is_const;
        bool is_volatile;
    };

    node template_type_node {
        %include <string>
        namespace_node_weak_ptr ns;
        std::string name;
        node template_args[];
    };

    node list_type_node {
        node type;
    };
};

visitor smartpointer_visitor
{
};

const visitor header_output_visitor
{
    header_output_visitor(std::ostream &);

    std::ostream &out;
};

const visitor impl_output_visitor
{
    header_output_visitor(std::ostream &);

    std::ostream &out;
};

}
}
